apiVersion: v1
kind: Namespace
metadata:
  name: ray-svc-non-finetuned
---
apiVersion: ray.io/v1alpha1
kind: RayService
metadata:
  name: ray-svc-non-finetuned
  namespace: ray-svc-non-finetuned
spec:
  serviceUnhealthySecondThreshold: 900 # Config for the health check threshold for Ray Serve applications. Default value is 900.
  deploymentUnhealthySecondThreshold: 300 # Config for the health check threshold for Ray dashboard agent. Default value is 300.
  # serveConfigV2 takes a yaml multi-line scalar, which should be a Ray Serve multi-application config. See https://docs.ray.io/en/latest/serve/multi-app.html.
  # Only one of serveConfig and serveConfigV2 should be used.
  serveConfigV2: |
    applications:
      - name: gptj_non_finetuned
        import_path: 00_serve_gptj_non_finetuned.deployment_gptj_non_finetuned 
        route_prefix: /gptj_non_finetuned
        runtime_env:
          working_dir: "${PRESIGNED_URL}"
          pip: 
            - transformers==4.26.0
            - torch>=1.12.0
            - datasets
            - evaluate
            - accelerate==0.20.3
            - transformers==4.26.0
            - torch>=1.12.0
        deployments:
          - name: PredictDeployment
            num_replicas: 1
            ray_actor_options:
              num_cpus: 1
              num_gpus: 1
  rayClusterConfig:
    rayVersion: '2.6.3' # should match the Ray version in the image of the containers
    ######################headGroupSpecs#################################
    # Ray head pod template.
    enableInTreeAutoscaling: true
    headGroupSpec:
      # The `rayStartParams` are used to configure the `ray start` command.
      # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
      # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
      rayStartParams:
        dashboard-host: '0.0.0.0'
      #pod template
      template:
        spec:
          nodeSelector:
            provisioner: gpu-serve # This is used to forcefully scale Karpenter specific provisioner for serve
          tolerations:
            - key: "nvidia.com/gpu"
              operator: "Exists"
              effect: "NoSchedule"
          volumes:
            - name: log-volume
              emptyDir: {}
            - name: ray-job-volume # TBD: Dont know if there is a need of this volume here
              hostPath:
                path: /tmp/
          containers:
            - name: ray-head
              image: rayproject/ray-ml:latest-gpu
              command: ["DS_BUILD_CPU_ADAM=1 pip install deepspeed==0.9.2"]
              resources:
                limits:
                  nvidia.com/gpu: 1
                  cpu: "12"
                  memory: "55Gi"
                  ephemeral-storage: "200Gi"
                requests:
                  nvidia.com/gpu: 1
                  cpu: "12"
                  memory: "55Gi"
                  ephemeral-storage: "200Gi"
              env:
                - name: RAY_LOG_TO_STDERR
                  value: "1"
                - name: CUDA_HOME
                  value: "/usr/local/cuda"
              volumeMounts:
                - mountPath: /tmp/ray
                  name: log-volume
                - mountPath: /mnt/cluster_storage
                  name: ray-job-volume
              ports:
                - containerPort: 6379
                  name: gcs-server
                - containerPort: 8265 # Ray dashboard
                  name: dashboard
                - containerPort: 10001
                  name: client
                - containerPort: 8000
                  name: serve
    workerGroupSpecs:
      # the pod replicas in this group typed worker
      - replicas: 1
        minReplicas: 1
        maxReplicas: 5
        # logical group name, for this called small-group, also can be functional
        groupName: small-group
        # The `rayStartParams` are used to configure the `ray start` command.
        # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
        # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
        rayStartParams: {}
        #pod template
        template:
          spec:
            nodeSelector:
              provisioner: gpu-serve # This is used to forcefully scale Karpenter specific provisioner for serve
            tolerations:
              - key: "nvidia.com/gpu"
                operator: "Exists"
                effect: "NoSchedule"
            volumes:
              - name: log-volume
                emptyDir: {}
              - name: ray-job-volume # TBD: Dont know if there is a need of this volume here
                hostPath:
                  path: /tmp/
            containers:
              - name: ray-worker # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
                image: rayproject/ray:2.6.3
                lifecycle:
                  preStop:
                    exec:
                      command: ["/bin/sh","-c","ray stop"]
                command: ["DS_BUILD_CPU_ADAM=1 pip install deepspeed==0.9.2"]
                resources:
                  limits:
                    nvidia.com/gpu: 1
                    cpu: "12"
                    memory: "55Gi"
                    ephemeral-storage: "200Gi"
                  requests:
                    nvidia.com/gpu: 1
                    cpu: "8"
                    memory: "55Gi"
                    ephemeral-storage: "200Gi"
                volumeMounts:
                - mountPath: /tmp/ray
                  name: log-volume
                - mountPath: /mnt/cluster_storage
                  name: ray-job-volume
                env:
                - name: RAY_LOG_TO_STDERR
                  value: "1"
                - name: CUDA_HOME
                  value: "/usr/local/cuda"

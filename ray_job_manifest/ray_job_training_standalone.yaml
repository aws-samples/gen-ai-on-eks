################################################################################################################
#This manifest can be used to serrve applications using GPU instances
#This resources are provisioned using the CRDs (RayService, RayCluster, RayJob)  created by the KubeRay operator
################################################################################################################
apiVersion: v1
kind: Namespace
metadata:
  name: ray-job-finetunning

---


apiVersion: ray.io/v1
kind: RayJob
metadata:
  name: ray-job-finetunning
  namespace: ray-job-finetunning
spec:
  # submissionMode specifies how RayJob submits the Ray job to the RayCluster.
  # The default value is "K8sJobMode", meaning RayJob will submit the Ray job via a submitter Kubernetes Job.
  # The alternative value is "HTTPMode", indicating that KubeRay will submit the Ray job by sending an HTTP request to the RayCluster.
  # submissionMode: "K8sJobMode"
  entrypoint: "aws s3 cp s3://data-on-eks-genai/scripts/train_script.py train_script.py || true;chmod +x train_script.py && python train_script.py"
  
  # shutdownAfterJobFinishes specifies whether the RayCluster should be deleted after the RayJob finishes. Default is false.
  # shutdownAfterJobFinishes: true

  # ttlSecondsAfterFinished specifies the number of seconds after which the RayCluster will be deleted after the RayJob finishes.
  # ttlSecondsAfterFinished: 60

  # activeDeadlineSeconds is the duration in seconds that the RayJob may be active before
  # KubeRay actively tries to terminate the RayJob; value must be positive integer.
  # activeDeadlineSeconds: 120

  # RuntimeEnvYAML represents the runtime environment configuration provided as a multi-line YAML string.
  # See https://docs.ray.io/en/latest/ray-core/handling-dependencies.html for details.
  # (New in KubeRay version 1.0.)
  runtimeEnvYAML: |
    pip:
      - ray
      - transformers
      - datasets
      - numpy
      - evaluate
      - boto3

    # env_vars:
    #   counter_name: "test_counter"

  # Suspend specifies whether the RayJob controller should create a RayCluster instance.
  # If a job is applied with the suspend field set to true, the RayCluster will not be created and we will wait for the transition to false.
  # If the RayCluster is already created, it will be deleted. In the case of transition to false, a new RayCluster will be created.
  # suspend: true

  # rayClusterSpec specifies the RayCluster instance to be created by the RayJob controller.
  rayClusterSpec:
    rayVersion: '2.11.0' # should match the Ray version in the image of the containers
    enableInTreeAutoscaling: true 
    # Ray head pod template
    headGroupSpec:
      # The `rayStartParams` are used to configure the `ray start` command.
      # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
      # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
      rayStartParams:
        dashboard-host: '0.0.0.0'
      #pod template
      template:
        spec:
          containers:
            - name: ray-head
              image: rayproject/ray-ml:2.11.0.a464b6-py311-cpu
              resources:
                limits:
                  cpu: "12"
                  memory: "16Gi"
                requests:
                  cpu: "12"
                  memory: "16Gi"
              volumeMounts:
                - mountPath: /tmp/ray
                  name: log-volume
                - mountPath: /mnt/cluster_storage
                  name: ray-job-volume
              ports:
                - containerPort: 6379
                  name: gcs-server
                - containerPort: 8265
                  name: dashboard
                - containerPort: 10001
                  name: client
                - containerPort: 8000
                  name: serve
              command: ["wget https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip && unzip awscli-exe-linux-x86_64.zip && sudo ./aws/install;aws s3 cp s3://data-on-eks-genai/scripts/train_script.py train_script.py || true;chmod +x train_script.py && python train_script.py"]
          volumes:
            - name: log-volume
              emptyDir: {}
            - name: ray-job-volume
              hostPath:
                path: /tmp/
    workerGroupSpecs:
      # the pod replicas in this group typed worker
      - replicas: 4
        minReplicas: 4
        maxReplicas: 10
        # logical group name, for this called small-group, also can be functional
        groupName: gpu-group
        # The `rayStartParams` are used to configure the `ray start` command.
        # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
        # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
        rayStartParams: {}
        #pod template
        template:
          spec:
            containers:
              - name: ray-worker # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
                image: rayproject/ray-ml:2.11.0.a464b6-py311-gpu
                lifecycle:
                  preStop:
                    exec:
                      command: [ "/bin/sh","-c","ray stop" ]
                resources:
                  limits:
                    nvidia.com/gpu: 1
                    cpu: "8"
                    memory: "50Gi"
                    ephemeral-storage: "200Gi"
                  requests:
                    nvidia.com/gpu: 1
                    cpu: "8"
                    memory: "50Gi"
                    ephemeral-storage: "200Gi"
                volumeMounts:
                  - mountPath: /tmp/ray
                    name: log-volume
                  - mountPath: /mnt/cluster_storage
                    name: ray-job-volume
                command: ["wget https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip && unzip awscli-exe-linux-x86_64.zip && sudo ./aws/install"]    
                env:
                  - name: RAY_LOG_TO_STDERR
                    value: "1"
                  - name: CUDA_HOME
                    value: "/usr/local/cuda"
  # SubmitterPodTemplate is the template for the pod that will run the `ray job submit` command against the RayCluster.
  # If SubmitterPodTemplate is specified, the first container is assumed to be the submitter container.
  # submitterPodTemplate:
  #   spec:
  #     restartPolicy: Never
  #     containers:
  #       - name: my-custom-rayjob-submitter-pod
  #         image: rayproject/ray:2.9.0
  #         # If Command is not specified, the correct command will be supplied at runtime using the RayJob spec `entrypoint` field.
  #         # Specifying Command is not recommended.
  #         # command: ["sh", "-c", "ray job submit --address=http://$RAY_DASHBOARD_ADDRESS --submission-id=$RAY_JOB_SUBMISSION_ID -- echo hello world"]


